Personal annotations about the coding steps to improve my learning curve.

- Criação do pacote model
- Declaração das classes que serão utilizadas
- Instalação do Spring Tool Suite 4
- Criação do banco de dados no PostgreSQL. Criei um BD específico para o projeto

- Adiciona Starters do Spring clicando com o botão direito em cima do nome do projeto.
Fizemos a importação do JPA e do PostgreSQL. Como deu erro, fiz novamente.

- Adiciona anotações no código para fazer a persistência no BD. Ver comentários nas classes
- Faz um commit pra salvar as alterações

- As configurações de banco de dados em projeto Spring Boot ficam no arquivo application.properties, dentro de resources
O professor copiou os dados de um site chamado mkyong.com
Fez a busca no google como spring data jpa postgres properties
Foi só copiar e alterar o nome do BD e a senha

- Cria uma variável idConta na classe Movimentacao para salvar no BD também. Fez os getters e setters e o @Column

- Cria um novo pacote de repositório para guardar as movimentações.
Cria duas Interface para isso e a extende com o JPA.Repository para fazer a persistência no BD
As duas interface são a CorrentistaRepository e a MovimentacaoRepository.

- Cria um novo pacote para o controller, que cria, altera, apaga os correntistas, etc.
Ver os comentários na classo CorrentistaController.

- A partir de agora deve-se configurar ambiente web. Então adiciona outro Spring Starter
chamado Spring Web. Com isso, um TomCat é executado e podemos visualizar o BD no browser.

- Insere um correntista no banco de dados para fazer o teste. Tem um script de INSERT no pgadmin.
Não colocamos valor para o id do correntista, já que o JPA vai fazer isso automaticamente.
Inserir o nome, cpf e saldo entre 'aspas simples'.

- Cria o pacote service e a classe CorrentistaService para fazer as inclusões de todos os dados no BD.

- Já está pronto para inserir dados no BD, mas só temos operações GET no http. Não conseguimos inserir dados.
Aí que vamos inserir o SWAGGER para documentar nossa API.
Em busca no google o professor copiou e colou a dependência no swagger no pom.xml.
Ele mencionou que sempre deve ter o groupId, artifactId e version na dependência.
Estava dando erro na execução. Isso foi por causa da versão do swagger mencionada no arquivo pom.xml.
Ao alterar para uma versão mais recente, funcionou. Atentar-se aos dados copiados da internet.

Para consultar a documentação feita pelo swagger, digitar esse endereço no browser:
http://localhost:8080/swagger-ui/index.html

Na aba GET é possível consultar os clientes cadastrados.
Na aba POST é possível cadastrar clientes novos. Para isso é só colocar o nome e cpf
conforme o swagger pede no campo 'Request body'.

- Agora é necessário fazer a mesma coisa com a movimentação. Como é necessário salvar cada nova 
movimentação, deve-se incluir uma nova classe no DTO.
As variáveis usadas são iguais às usadas na classe Movimentacao.java.

- Fazer a MovimentacaoService. É bem parecida com a CorrentistaService.

- Nesse momento, a movimentação não está aparecendo no saldo do cliente.
Isso é porque não codificamos como atualizar o saldo da conta em questão.
A atualização está descrita nos comentários da classe MovimentacaoService.

======================= FINAL DA AULA 1 ======================
